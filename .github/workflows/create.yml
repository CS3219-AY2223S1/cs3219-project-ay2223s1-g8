name: Create GKE cluster and setup environment

on: 
  workflow_dispatch:
    branches: [ "main", "prod" ]
  push:
    branches: [ "main", "prod", "automation" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GKE_CLUSTER: peerprep-cluster
  GKE_ZONE: us-central1

jobs:
  # terraform:
  #   env:
  #     GOOGLE_CREDENTIALS: ${{ secrets.GKE_TERRAFORM_CREDS }}
  #   name: "Terraform - Create cluster"
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Terraform Format
  #       id: fmt
  #       run: |
  #         cd deployment/terraform
  #         terraform fmt -check

  #     - name: Terraform Init
  #       id: init
  #       run: |
  #         cd deployment/terraform
  #         terraform init -reconfigure
          
  #     - name: Terraform Plan
  #       id: plan
  #       run: |
  #         cd deployment/terraform
  #         terraform plan -no-color
  #       continue-on-error: true

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       id: apply
  #       run: |
  #         cd deployment/terraform
  #         terraform apply -auto-approve
  
  #     - name: Terraform Apply Cleanup
  #       if: steps.apply.outcome == 'failure'
  #       run: |
  #         cd deployment/terraform
  #         terraform destroy -auto-approve
  bootstrap:
    name: Set up secrets and ingress gateway
    runs-on: ubuntu-latest
    # needs: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          service_account_key: ${{ secrets.GKE_TERRAFORM_CREDS }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Set up GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_TERRAFORM_CREDS }}
      
      - name: Create peerprep-secrets
        continue-on-error: true
        run: |-
          kubectl delete secret peerprep-secrets --ignore-not-found=true
          kubectl create secret generic peerprep-secrets \
            --from-literal=database=peerprep-dev \
            --from-literal=username=${{ secrets.PG_USERNAME }} \
            --from-literal=password=${{ secrets.PG_PASSWORD }} \
            --from-literal=jwt=${{ secrets.JWT_SECRET }} \
            --from-literal=apiUrl=${{ secrets.GATEWAY_URL }} \
            --from-literal=historyMongoDb=${{ secrets.HISTORY_MONGO_URL_PROD }} \
            --from-literal=SERVICE_ACCOUNT_KEY=${{ secrets.GKE_TERRAFORM_CREDS }}

      - name: Set up service account
        run: |-
          kubectl apply -f ./deployment/service-account.yaml
          kubectl annotate serviceaccount cs3219-group8 iam.gke.io/gcp-service-account=cs3219-group8-service-account@peerprep-363807.iam.gserviceaccount.com --overwrite=true

      - name: Deploy services
        run: |-
          kubectl delete deploy user-service matching-service question-service history-service communication-service frontend --ignore-not-found=true
          kubectl apply -f ./deployment/microservices/user-service.yaml
          kubectl apply -f ./deployment/microservices/matching-service.yaml
          kubectl apply -f ./deployment/microservices/question-service.yaml
          kubectl apply -f ./deployment/microservices/history-service.yaml
          kubectl apply -f ./deployment/microservices/communication-service.yaml
          kubectl apply -f ./deployment/microservices/frontend.yaml
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/matching-service
          kubectl rollout status deployment/question-service
          kubectl rollout status deployment/history-service
          kubectl rollout status deployment/communication-service
          kubectl rollout status deployment/frontend

      - name: Set up ingress controller
        run: |-
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

      # - name: Deploy ingress
      #   run: |-
      #     kubectl delete ingress gateway --ignore-not-found=true
      #     kubectl apply -f ./deployment/gateway.yaml
