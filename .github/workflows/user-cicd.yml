name: User - Test, Build and Deploy in GKE

on:
  push:
    branches: [ "cicd" ]
  pull_request:
    branches: [ "cicd" ]

jobs:
  Test:
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: "test"
      USER: ${{ secrets.PG_USERNAME }}
      HOST: "127.0.0.1"
      PASSWORD: ${{ secrets.PG_PASSWORD }}
      PORT: "5432"
      TEST_DB: peerprep-test
      PROD_DB: peerprep-prod
      TOKEN_KEY: ${{ secrets.JWT_SECRET }}

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: ${{ secrets.PG_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: peerprep-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: |
          cd user-service
          npm ci
      - name: Run testcases
        run: |
          cd user-service
          npm run test

  Deploy:
    needs: Test
    name: Build, Push and deploy app to gke
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER: peerprep-cluster
      GKE_ZONE: us-central1
      DEPLOYMENT_NAME: user-service 
      IMAGE: user-service-image
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

  #     # Configure Docker to use the gcloud command-line tool as a credential
  #     # helper for authentication
  #     - run: |-
  #         gcloud --quiet auth configure-docker

  #     # Get the GKE credentials so we can deploy to the cluster
  #     - uses: 'google-github-actions/get-gke-credentials@v0'
  #       with:
  #         cluster_name: ${{ env.GKE_CLUSTER }}
  #         location: ${{ env.GKE_ZONE }}
  #         credentials: ${{ secrets.GKE_SA_KEY }}

  #     - name: Declare docker tag variables
  #       id: vars
  #       shell: bash
  #       run: |
  #         GIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
  #         echo "##[set-output name=docker_tag;]$(echo ${GITHUB_REF##*/}-${GIT_HASH})"

  #     # Build the Docker image
  #     - name: Build
  #       run: |-
  #         docker build \
  #           --tag "gcr.io/${PROJECT_ID}/$IMAGE:${{ steps.vars.outputs.docker_tag }}" .

  #     # Push the Docker image to Google Container Registry
  #     - name: Publish
  #       run: |-
  #         docker push "gcr.io/$PROJECT_ID/${IMAGE}:${{ steps.vars.outputs.docker_tag }}"

  #     - name: Setup Kustomize
  #       uses: imranismail/setup-kustomize@v1
  #       with:
  #         kustomize-version: 4.5.4

  #     - name: Update deploy image
  #       working-directory: deploy
  #       run: |-
  #         kustomize edit set image "gcr.io/$PROJECT_ID/${IMAGE}:${{ steps.vars.outputs.docker_tag }}"
  #         cat kustomization.yaml
  #         kustomize build . | kubectl apply -f -
  #         kubectl rollout status deployment/${DEPLOYMENT_NAME}
  #         kubectl get services -o wide