name: User CICD

on:
  push:
    branches: [ "prod" ]
    paths:
      - "user-service/**"
      - ".github/workflows/user-cicd.yml"
  pull_request:
    branches: [ "prod", "main" ]
    paths:
      - "user-service/**"
      - ".github/workflows/user-cicd.yml"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GKE_CLUSTER: peerprep-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: user-service 
  IMAGE: user-service-image

jobs:
  Test:
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: "test"
      USER: ${{ secrets.PG_USERNAME }}
      HOST: "127.0.0.1"
      PASSWORD: ${{ secrets.PG_PASSWORD }}
      PORT: "5432"
      TEST_DB: peerprep-test
      TOKEN_KEY: ${{ secrets.JWT_SECRET }}

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: ${{ secrets.PG_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: peerprep-test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: |
          cd ${{ env.DEPLOYMENT_NAME }}
          npm ci
      - name: Run testcases
        run: |
          cd ${{ env.DEPLOYMENT_NAME }}
          npm run test

  Build:
    needs: Test
    if: ${{ github.event_name == 'push' }}
    name: Build and Push to GKE
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          service_account_key: ${{ secrets.GKE_TERRAFORM_CREDS }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_TERRAFORM_CREDS }}
    
      - name: Declare docker tag variables
        id: vars
        shell: bash
        run: |
          GIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
          echo "##[set-output name=docker_tag;]$(echo ${GITHUB_REF##*/}-${GIT_HASH})"
        
      # Build and push image to Google Container Registry
      - name: Build and push using Cloud Build
        run: |
          cd ${{ env.DEPLOYMENT_NAME }}
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud builds submit --tag ${{ env.GKE_ZONE }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DEPLOYMENT_NAME }}/${{ env.IMAGE }}:${{ steps.vars.outputs.docker_tag }} .


  Deploy:
    needs: Build
    if: ${{ github.event_name == 'push' }}
    name: Deploy to GKE
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          service_account_key: ${{ secrets.GKE_TERRAFORM_CREDS }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_TERRAFORM_CREDS }}

      - name: Deploy
        run: |-
          kubectl apply -f ./deployment/microservices/${{ env.DEPLOYMENT_NAME }}.yaml
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl get services -o wide